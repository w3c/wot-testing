{
  "@context": [
    "https://www.w3.org/2022/wot/td/v1.1",
    {
      "brick": "https://brickschema.org/schema/1.0.3/BrickFrame#",
      "mcep": "https://w3id.org/tinyml-schema/cep-rule-schema#""mcep": "http://mcep/shared"
    }
  ],
  "title": "Siemens TargetV device",
  "@type": [
    "mcep:Device",
    "brick:Thermostat",
    "mcep:ThingFunction"
  ],
  "id": "urn:node:targetV",
  "version": {
    "model": "1.0.0",
    "instance": "1.0.0"
  },
  "base": "mqtt://192.168.120.214:1883",
  "description": "Siemens TargetV device that integrates CO2, temperature, and humidity, and occupancy sensors",
  "securityDefinitions": {
    "nosec_sc": {
      "scheme": "nosec"
    }
  },
  "security": "nosec_sc",
  "properties": {
    "co2": {
      "title": "Reads the CO2 value from the sensor connected to the TargetV device",
      "type": "string",
      "writeOnly": false,
      "observable": true,
      "forms": [
        {
          "href": "/co2",
          "op": [
            "readproperty",
            "observeproperty"
          ]
        }
      ]
    },
    "temperature": {
      "title": "Reads the temperature value from the sensor connected to a TargetV device",
      "type": "string",
      "writeOnly": false,
      "observable": true,
      "forms": [
        {
          "href": "/temperature",
          "op": [
            "readproperty",
            "observeproperty"
          ]
        }
      ]
    },
    "humidity": {
      "title": "Reads the humidity value from the sensor connected to a TargetV device",
      "type": "string",
      "writeOnly": false,
      "observable": true,
      "forms": [
        {
          "href": "/humidity",
          "op": [
            "readproperty",
            "observeproperty"
          ]
        }
      ]
    },
    "occupancy": {
      "title": "Reads the occupancy value from the sensor connected to a TargetV device",
      "type": "string",
      "writeOnly": false,
      "observable": true,
      "forms": [
        {
          "href": "/occupancy",
          "op": [
            "readproperty",
            "observeproperty"
          ]
        }
      ]
    },
    "averageTemperature": {
      "title": "Virtual function that calculates the average temperature",
      "mcep:rule": "avg_temp[_,_](Y) :- aggr {temp[_,_](X), *, Y := avg(X)} [count 3]",
      "mcep:operates_on": "temperature",
      "mcep:deployable": [
        "mcep:Device",
        "brick:Thermostat"
      ],
      "type": "number",
      "readOnly": true,
      "observable": true,
      "forms": [
        {
          "href": "/avg_temp",
          "op": [
            "readproperty",
            "observeproperty"
          ]
        }
      ]
    },
    "averageTemperatureStart": {
      "@type": "mcep:start",
      "title": "start the rule deployment on the device",
      "description": "Activate deployed rule on device with provided uuid",
      "type": "string",
      "readOnly": false,
      "writeOnly": true,
      "observable": true,
      "forms": [
        {
          "href": "input_rule",
          "op": [
            "unobserveproperty",
            "observeproperty",
            "writeproperty"
          ]
        }
      ]
    },
  "averageTemperatureStop": {
    "@type": "mcep:stop",
    "title": "stops the rule deployment on the device",
    "readOnly": false,
    "writeOnly": true,
    "description": "Stops deployed rule on device with provided uuid",
    "type": "string",
    "observable": true,
    "forms": [
      {
        "href": "input_rule",
        "op": [
          "unobserveproperty",
          "observeproperty",
          "writeproperty"
        ]
      }
    ]
  }
}
